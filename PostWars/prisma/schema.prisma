// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  REGULAR
  TEAM_LEAD
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(REGULAR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Team assignment
  teamId    String?
  
  // Gamification fields
  totalScore     Int @default(0)
  postsThisMonth Int @default(0)
  currentStreak  Int @default(0)
  bestStreak     Int @default(0)
  
  sessions    Session[]
  linkedinPosts LinkedinPost[]
  achievements UserAchievement[]
  team        Team?   @relation("TeamMembers", fields: [teamId], references: [id])
  ledTeams    Team[]  @relation("TeamLead")
  passwordResets PasswordReset[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model LinkedinPost {
  id          String   @id @default(cuid())
  userId      String
  linkedinId  String   @unique // LinkedIn post ID
  url         String   @unique
  content     String   @db.Text
  authorName  String
  
  // Engagement metrics
  reactions   Int @default(0)
  comments    Int @default(0)
  reposts     Int @default(0)
  totalEngagement Int @default(0)
  
  // Scoring
  baseScore      Int @default(0)
  engagementScore Int @default(0)
  totalScore     Int @default(0)
  
  // Metadata
  wordCount      Int
  charCount      Int
  postedAt       DateTime
  lastScrapedAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics PostAnalytics[]

  @@map("linkedin_posts")
}

model PostAnalytics {
  id       String @id @default(cuid())
  postId   String
  
  // Snapshot of metrics at this time
  reactions   Int
  comments    Int
  reposts     Int
  totalEngagement Int
  
  // Calculated growth since last check
  reactionGrowth Int @default(0)
  commentGrowth  Int @default(0)
  repostGrowth   Int @default(0)
  
  recordedAt DateTime @default(now())
  
  post LinkedinPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_analytics")
}

model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String?
  points      Int    @default(0)
  
  // Requirements
  requirementType  String // 'posts_count', 'engagement_total', 'streak_days', 'single_post_reactions'
  requirementValue Int
  
  createdAt DateTime @default(now())
  
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Team Lead
  teamLeadId  String?  @unique
  teamLead    User?    @relation("TeamLead", fields: [teamLeadId], references: [id])
  
  // Team Members
  members     User[]   @relation("TeamMembers")
  goals       Goal[]

  @@map("teams")
}

enum GoalType {
  POSTS_COUNT
  TOTAL_ENGAGEMENT
  AVERAGE_ENGAGEMENT
  TEAM_SCORE
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

model Goal {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        GoalType
  targetValue Int
  currentValue Int       @default(0)
  status      GoalStatus @default(ACTIVE)
  
  // Time period
  startDate   DateTime   @default(now())
  endDate     DateTime
  
  // Team assignment
  teamId      String
  team        Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("goals")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}
